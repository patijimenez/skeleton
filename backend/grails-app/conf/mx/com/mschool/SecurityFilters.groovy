package mx.com.mschool

import mx.com.mschool.exception.*
import org.apache.shiro.SecurityUtils
import grails.converters.JSON
import java.net.URLDecoder

/**
 * Generated by the Shiro plugin. This filters class protects all URLs
 * via access control by convention.
 */
class SecurityFilters {
    def filters = {
				api(uri: "/api/**") {
                                    
						before = {
                response.setHeader("Cache-Control", "no-cache, must-revalidate")
								if(controllerName == "apiAuth") return true
								if(controllerName == "apiComplaint") return true
                if(controllerName == "apiTemporalUser") return true
                if(controllerName == "apiSurvey") return true
								if(controllerName == "apiMessage") return true
								if(controllerName == "apiCatalog") return true
								if(controllerName == "modernBrowser") return true
                if(controllerName == "apiHealthCheck") return true
								try {
                  if(controllerName == "vitrinaInfotec"){
                    def authHeaderToken = request.getHeader("X-AUTH-TOKEN")
                    def infotecService = ServiceUrl.findByServiceName("servicioInfotec")
                    if(authHeaderToken == null) {
                      throw new AppException(ErrorInfo.XAUTH_ERROR, "El request no contiene un token de X-AUTH")
                    }
                    if(!(authHeaderToken && authHeaderToken.equals(infotecService.authToken))){
                      throw new AppException(ErrorInfo.XAUTH_ERROR, "El token X-AUTH del request no es valido")
                    }
                    return true
                  }
									def headerToken = request.getHeader("X-XSRF-TOKEN")
									if(headerToken == null) {
										throw new AppException(ErrorInfo.XSRF_ERROR, "El request no contiene un token de XSRF")
									}
									def subject = SecurityUtils.subject
									if(!subject.isAuthenticated()) {
										throw new AppException(ErrorInfo.SESSION_ERROR, "El usuario no est치 firmado en la aplicaci칩n")
									}
									def sessionToken = subject.session.getAttribute("XSRF_TOKEN")
									if(sessionToken == null) {
										subject.logout()
										throw new AppException(ErrorInfo.SESSION_ERROR, "No hay un token de XSRF en la sesi칩n")
									}
									if(headerToken != sessionToken) {
										subject.logout()
										throw new AppException(ErrorInfo.XSRF_ATTACK_ERROR, "El token de xsrf no corresponde a la sesi칩n")
									}
									return true
								} catch(AppException ex) {
									def info = ex.errorInfo
									def exceptionData = [
										errorId: info.errorId,
										description: info.description,
										severity: info.severity,
										origin: info.origin,
										message: ex.message
									]
									response.status = 401
									response.contentType = "application/json"
									render exceptionData as JSON
									return false
								}
						}
				}
        all(uri: "/**") {
            before = {
                // Ignore direct views (e.g. the default main index page).
                if (!controllerName) return true
								if(controllerName == "apiAuth") return true
								if(controllerName == "apiMessage") return true
								if(controllerName == "apiCatalog") return true
								if(controllerName == "apiComplaint") return true
                if(controllerName == "apiTemporalUser") return true
                if(controllerName == "apiSurvey") return true
								if(controllerName == "apiStatus") return true
								if(controllerName == "modernBrowser") return true
                if(controllerName == "apiHealthCheck") return true
                if(controllerName == "vitrinaInfotec") return true
                // Access control by convention.
                  accessControl()
            }
        }
    }
}
